(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{67:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var a=t(2),r=t(6),o=(t(0),t(74)),i={id:"command_interaction",title:"Interact with a Command"},l={unversionedId:"command_details/command_interaction",id:"command_details/command_interaction",isDocsHomePage:!1,title:"Interact with a Command",description:"Getting all data at once",source:"@site/docs\\command_details\\command_intercation.md",permalink:"/flutter_command/docs/command_details/command_interaction",editUrl:"https://github.com/escamoteur/flutter_command/docs/command_details/command_intercation.md",sidebar:"someSidebar",previous:{title:"Types of Command",permalink:"/flutter_command/docs/command_details/command_types"},next:{title:"Error Handling",permalink:"/flutter_command/docs/command_details/error_handling"}},c=[{value:"Getting all data at once",id:"getting-all-data-at-once",children:[]},{value:"Reacting on Functions with no results",id:"reacting-on-functions-with-no-results",children:[]},{value:"Logging",id:"logging",children:[]}],s={rightToc:c};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"getting-all-data-at-once"},"Getting all data at once"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"isExecuting")," and ",Object(o.b)("inlineCode",{parentName:"p"},"thrownExceptions")," are great properties but what if you don't want to use separate ",Object(o.b)("inlineCode",{parentName:"p"},"ValueListenableBuilders")," for each of them plus one for the data?\n",Object(o.b)("inlineCode",{parentName:"p"},"Command")," got you covered with the ",Object(o.b)("inlineCode",{parentName:"p"},"results")," property that is an ",Object(o.b)("inlineCode",{parentName:"p"},"ValueListenable<CommandResult>")," which combines all needed data and is updated several times during a ",Object(o.b)("inlineCode",{parentName:"p"},"Command")," execution."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"/// Combined execution state of an `Command`\n/// Will be updated for any state change of any of the fields\n/// 1. If the command was just newly created `results.value` has the value:\n///    `param data,null, null, false` (paramData,data, error, isExecuting)\n/// 2. When calling execute: `param data, null, null, true`\n/// 3. When execution finishes: `param data, the result, null, false`\n/// If an error occurs: `param data, null, error, false`\n/// `param data` is the data that you pass as parameter when calling the command\nclass CommandResult<TParam, TResult> {\n  final TParam paramData;\n  final TResult data;\n  final Object error;\n  final bool isExecuting;\n\n  bool get hasData => data != null;\n  bool get hasError => error != null;\n\n  /// This is a stripped down version of the class. Please see the source\n}\n")),Object(o.b)("p",null,"You can find a Version of the Weather app that uses this approach in ",Object(o.b)("inlineCode",{parentName:"p"},"example_command_results"),". There the ",Object(o.b)("inlineCode",{parentName:"p"},"homepage.dart")," looks like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-dart"}),"child: ValueListenableBuilder<\n    CommandResult<String, List<WeatherEntry>>>(\n  valueListenable:\n      TheViewModel.of(context).updateWeatherCommand.results,\n  builder: (BuildContext context, result, _) {\n    if (result.isExecuting) {\n      return Center(\n        child: SizedBox(\n          width: 50.0,\n          height: 50.0,\n          child: CircularProgressIndicator(),\n        ),\n      );\n    } else if (result.hasData) {\n      return WeatherListView(result.data);\n    } else {\n      assert(result.hasError);\n      return Column(\n        children: [\n          Text('An Error has occurred!'),\n          Text(result.error.toString()),\n          if (result.error != null)\n            Text('For search term: ${result.paramData}')\n        ],\n      );\n    }\n  },\n),\n")),Object(o.b)("p",null,"Even if you use ",Object(o.b)("inlineCode",{parentName:"p"},"results")," the other properties are updated as before, so you can mix both approaches as you need it. For instance use ",Object(o.b)("inlineCode",{parentName:"p"},"results")," as above but additionally listening to ",Object(o.b)("inlineCode",{parentName:"p"},"thrownExceptions")," for logging."),Object(o.b)("p",null,"If you want to be able to always display data (while loading or in case of an error) you can pass ",Object(o.b)("inlineCode",{parentName:"p"},"includeLastResultInCommandResults=true"),", the last successful result will be included as ",Object(o.b)("inlineCode",{parentName:"p"},"data")," unless a new result is available."),Object(o.b)("h2",{id:"reacting-on-functions-with-no-results"},"Reacting on Functions with no results"),Object(o.b)("p",null,"  Even if your wrapped function doesn't return a value, you can react on the end of the function execution by registering a listener to the ",Object(o.b)("inlineCode",{parentName:"p"},"Command"),". The command Value will be void but your handler is ensured to be called."),Object(o.b)("h2",{id:"logging"},"Logging"),Object(o.b)("p",null,"If you are not sure what's going on in your App you can register an handler function to "),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-Dart"}),"static void Function(String commandName, CommandResult result) loggingHandler;\n")),Object(o.b)("p",null,"It will get executed on every ",Object(o.b)("inlineCode",{parentName:"p"},"Command")," execution in your App. ",Object(o.b)("inlineCode",{parentName:"p"},"commandName")," is the optional ",Object(o.b)("inlineCode",{parentName:"p"},"debugName")," that you can pass when creating a command."))}u.isMDXComponent=!0},74:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),u=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=u(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},p=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=u(t),p=a,b=d["".concat(i,".").concat(p)]||d[p]||m[p]||o;return t?r.a.createElement(b,l(l({ref:n},s),{},{components:t})):r.a.createElement(b,l({ref:n},s))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"}}]);