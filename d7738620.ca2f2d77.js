(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{66:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var r=n(2),a=n(6),i=(n(0),n(74)),o={id:"command_builder",title:"CommandBuilder Widget",sidebar_label:"CommandBuilder Widget"},l={unversionedId:"command_builder",id:"command_builder",isDocsHomePage:!1,title:"CommandBuilder Widget",description:"A Command exposes a compound state of its execution timeline via the Command.results attribute. This attribute is useful if you decide to display different widgets for different states of the command. Using a ValueListenableBuilder it can be addressed in the following way.",source:"@site/docs\\command_builder.md",permalink:"/flutter_command/docs/command_builder",editUrl:"https://github.com/escamoteur/flutter_command/docs/command_builder.md",sidebar_label:"CommandBuilder Widget",sidebar:"someSidebar",previous:{title:"Command Attributes",permalink:"/flutter_command/docs/command_details/command_attributes"},next:{title:"Testing Commands",permalink:"/flutter_command/docs/testing_commands"}},c=[],s={rightToc:c};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"Command")," exposes a compound state of its execution timeline via the ",Object(i.b)("inlineCode",{parentName:"p"},"Command.results")," attribute. This attribute is useful if you decide to display different widgets for different states of the command. Using a ",Object(i.b)("inlineCode",{parentName:"p"},"ValueListenableBuilder")," it can be addressed in the following way."),Object(i.b)("p",null,"Lets us assume your command connects to a rest api and is expected to return a list of values in an asynchronous manner."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-dart"}),"\n/// Asynchronous method to fetch results\nFuture<List<String>> fetchResults(String query) => Future.delayed(\n    Duration(seconds: 2),\n    () => [\n          'Result1',\n          'Result2',\n          'Result3',\n        ]);\n\n/// Asynchronous command wrapping [fetchResults].\nCommand<String, List<String>> fetchCommand =\n    Command.createAsync<String, List<String>>((String name) async {\n  final results = await fetchResults('query');\n  return results;\n}, ['initial result']);\n")),Object(i.b)("p",null,"You can listen to this ",Object(i.b)("inlineCode",{parentName:"p"},"fetchCommand")," in a ",Object(i.b)("inlineCode",{parentName:"p"},"ValueListenableBuilder")," and build the respective widgets as shown below."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-dart"}),"class ResultList extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return ValueListenableBuilder<CommandResult<String, List<String>>>(\n        valueListenable: fetchCommand.results,\n        builder: (context, cmdResult, child) {\n          if (cmdResult.hasError) {\n            return Text('Some thing went wrong while fetching');\n          }\n          if (cmdResult.hasData) {\n            ListView(\n              children:\n                  cmdResult.data.map((e) => ListTile(title: Text(e))).toList(),\n            );\n          }\n          return Center(\n            child: CircularProgressIndicator(),\n          );\n        });\n  }\n}\n")),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"flutter_command")," includes a ",Object(i.b)("inlineCode",{parentName:"p"},"CommandBuilder")," widget which simplifies the process of reacting to various states of the ",Object(i.b)("inlineCode",{parentName:"p"},"results")," exposed in a Command. For more details on ",Object(i.b)("inlineCode",{parentName:"p"},"results")," check this ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/flutter_command/docs/command_details/command_attributes#extract-information-from-commands"}),"section")," of command attributes."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"CommandBuilder")," widget provides properties which can connect a callback to different states of the command's execution timeline. It internally listens to the ",Object(i.b)("inlineCode",{parentName:"p"},"results")," attribute which is a ",Object(i.b)("inlineCode",{parentName:"p"},"ValueListenable")," and depending on its properties calls the provided call-backs."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"results.isExecuting")," via ",Object(i.b)("inlineCode",{parentName:"li"},"whileExecuting")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"results.hasData")," via ",Object(i.b)("inlineCode",{parentName:"li"},"onData")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"results.hasError")," via ",Object(i.b)("inlineCode",{parentName:"li"},"onError"))),Object(i.b)("p",null,"The example shown above can be re-written using CommandBuilder as shown below. Comparatively a readable version."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-dart"}),"class ResultList extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return CommandBuilder<String, List<String>>(\n      command: fetchCommand,\n      onData: (context, data, param) => ListView(\n        children: data.map((e) => ListTile(title: Text(e))).toList(),\n      ),\n      onError: (context, error, param) => Text('Some thing went wrong while fetching'),\n      whileExecuting: (context, param) => Center(\n        child: CircularProgressIndicator(),\n      ),\n    );\n  }\n}\n")))}d.isMDXComponent=!0},74:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return p}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=a.a.createContext({}),d=function(e){var t=a.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=d(n),b=r,p=u["".concat(o,".").concat(b)]||u[b]||m[b]||i;return n?a.a.createElement(p,l(l({ref:t},s),{},{components:n})):a.a.createElement(p,l({ref:t},s))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);